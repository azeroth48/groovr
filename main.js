// Generated by CoffeeScript 1.6.2
(function() {
  var async, cheerio, clientSaltRegex, crypto, extraInfoRegex, groovr, randomizer, request, sessionUUID, userAgent, uuid, vm;

  crypto = require('crypto');

  async = require('async');

  request = require('request');

  cheerio = require('cheerio');

  uuid = require('node-uuid');

  vm = require('vm');

  userAgent = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1468.0 Safari/537.36';

  extraInfoRegex = /\{client:"(\S*)",clientRevision:"(\d*)"\}/;

  clientSaltRegex = /var \S="(\S*)",r=\{faultCodes:/;

  sessionUUID = uuid.v4();

  randomizer = function() {
    var i;

    return ((function() {
      var _i, _results;

      _results = [];
      for (i = _i = 0; _i < 6; i = ++_i) {
        _results.push(Math.floor(Math.random() * 16).toString(16));
      }
      return _results;
    })()).join('');
  };

  groovr = {
    getJSONQuery: function(method, commToken, config, extraConfig) {
      var body, req;

      body = {
        method: method,
        header: {
          uuid: sessionUUID,
          clientRevision: extraConfig.clientRevision,
          country: config.country,
          privacy: 0,
          client: extraConfig.client,
          session: config.sessionID
        }
      };
      if (commToken != null) {
        body.header.token = groovr.getRequestToken(method, commToken, extraConfig.clientSalt);
      }
      req = {
        method: 'POST',
        url: "https://html5.grooveshark.com/more.php?" + method,
        headers: {
          'User-Agent': userAgent
        },
        json: body
      };
      return req;
    },
    getSecretKey: function(sessionId) {
      return crypto.createHash('md5').update(sessionId).digest('hex');
    },
    getRequestToken: function(method, commToken, salt) {
      var rand, token;

      rand = randomizer();
      token = "" + method + ":" + commToken + ":" + salt + ":" + rand;
      return "" + rand + (crypto.createHash('sha1').update(token).digest('hex'));
    },
    getExtraConfig: function(cb) {
      var ropt;

      ropt = {
        url: "http://html5.grooveshark.com/build/app.min.js",
        headers: {
          'User-Agent': userAgent
        }
      };
      return request(ropt, function(err, res, body) {
        var client, full, matches, out, revision, salt;

        if (err != null) {
          return cb(err);
        }
        matches = body.match(extraInfoRegex);
        full = matches[0], client = matches[1], revision = matches[2];
        matches = body.match(clientSaltRegex);
        full = matches[0], salt = matches[1];
        out = {
          client: client,
          clientRevision: revision,
          clientSalt: salt
        };
        return cb(null, out);
      });
    },
    getConfig: function(cb) {
      var ropt;

      ropt = {
        url: "http://html5.grooveshark.com",
        headers: {
          'User-Agent': userAgent
        }
      };
      return request(ropt, function(err, res, body) {
        var $, constants, ctx, script;

        if (err != null) {
          return cb(err);
        }
        $ = cheerio.load(body);
        constants = $('script').eq(1).text();
        script = vm.createScript(constants);
        ctx = {
          window: {},
          GS: {
            locales: {}
          }
        };
        script.runInNewContext(ctx);
        return cb(null, ctx.window.GS.config);
      });
    },
    getCommunicationToken: function(cb) {
      return async.parallel([groovr.getConfig, groovr.getExtraConfig], function(err, _arg) {
        var config, extraConfig, ropt;

        config = _arg[0], extraConfig = _arg[1];
        if (err != null) {
          return cb(err);
        }
        ropt = groovr.getJSONQuery('getCommunicationToken', null, config, extraConfig);
        ropt.json.parameters = {
          secretKey: groovr.getSecretKey(config.sessionID)
        };
        return request(ropt, function(err, res, body) {
          if (err != null) {
            return cb(err);
          }
          return cb(null, body.result, config, extraConfig);
        });
      });
    },
    getPopular: function(type, cb) {
      var tiype;

      if (typeof type === 'function') {
        cb = type;
        tiype = 'daily';
      }
      return groovr.getCommunicationToken(function(err, commToken, config, extraConfig) {
        var ropt;

        if (err != null) {
          return cb(err);
        }
        ropt = groovr.getJSONQuery('popularGetSongs', commToken, config, extraConfig);
        ropt.json.parameters = {
          type: type
        };
        return request(ropt, function(err, res, body) {
          if (err != null) {
            return cb(err);
          }
          return cb(null, body.result.Songs, config, extraConfig);
        });
      });
    },
    search: function(opt, cb) {
      if (opt == null) {
        opt = {};
      }
      return groovr.getCommunicationToken(function(err, commToken, config, extraConfig) {
        var ropt;

        if (err != null) {
          return cb(err);
        }
        ropt = groovr.getJSONQuery('getResultsFromSearch', commToken, config, extraConfig);
        ropt.json.parameters = {
          query: opt.query,
          type: opt.type
        };
        return request(ropt, function(err, res, body) {
          if (err != null) {
            return cb(err);
          }
          return cb(null, body.result.result, config, extraConfig);
        });
      });
    },
    getSongFile: function(songID, cb) {
      return groovr.getCommunicationToken(function(err, commToken, config, extraConfig) {
        var ropt;

        if (err != null) {
          return cb(err);
        }
        ropt = groovr.getJSONQuery('getStreamKeyFromSongIDEx', commToken, config, extraConfig);
        ropt.json.parameters = {
          prefetch: false,
          mobile: true,
          songID: songID,
          country: config.country
        };
        return request(ropt, function(err, res, body) {
          var _ref, _ref1;

          if (err != null) {
            return cb(err);
          }
          if (!(((body != null ? (_ref = body.result) != null ? _ref.ip : void 0 : void 0) != null) && ((body != null ? (_ref1 = body.result) != null ? _ref1.streamKey : void 0 : void 0) != null))) {
            return cb("Data not returned - Limit reached?");
          }
          body.result.url = "http://" + body.result.ip + "/stream.php?streamKey=" + body.result.streamKey;
          return cb(null, body.result, config, extraConfig);
        });
      });
    }
  };

  module.exports = groovr;

}).call(this);
